{"version":3,"sources":["WinLose.js","Board/Cell.js","Board/Board.js","Directions.js","App.js","reportWebVitals.js","index.js"],"names":["WinLose","didUserWin","onPlayAgainClick","className","style","margin","textAlign","onClick","Cell","color","value","x","y","hideShips","onCellClick","background","Board","board","rows","i","length","row","j","push","display","flexDirection","Directions","onDonePlacingShipsClick","width","App","startingUserBoard","Array","from","_","fill","startingComputerBoard","startingProbabilityBoard","useState","userBoard","setUserBoard","computerBoard","setComputerBoard","probabilityBoard","setProbabilityBoard","isUserPlacingShips","setIsUserPlacingShips","setDidUserWin","getRandom","min","max","Math","floor","random","placeShip","ship","direction","tempX","tempY","canPlaceShip","updateProbabilitiesAroundCoordinate","isHit","probabilityFactor","probabiltiyChange","inBounds","getNextCellState","prevState","isAllShipsSunken","prevBoard","newBoard","map","inner","slice","nextState","makeUserMove","bestMove","maxProbability","getBestMove","resultingCellState","updateProbabilities","makeComputerMove","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAUiBA,MAVjB,YAAoD,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,iBAE3B,OACI,sBAAKC,UAAW,OAAQC,MAAO,CAACC,OAAQ,GAAIC,UAAW,UAAvD,UACI,6BAAKL,EAAa,WAAa,cAC/B,wBAAQM,QAASL,EAAkBC,UAAW,SAA9C,4B,MCiCKK,MApCjB,YAAwD,IAEhDC,EAFQC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,EAAGC,EAA6B,EAA7BA,EAAGC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,YAIpC,OAAQJ,GAEJ,IAAK,IACDD,EAAQ,YACR,MAEJ,IAAK,IACDA,EAAQ,YACR,MAEJ,IAAK,IACDA,EAAQ,QACR,MAEJ,IAAK,IACDA,EAAQ,UACR,MAEJ,IAAK,IACDA,EAASI,EAAY,YAAc,QACnC,MACJ,QACIJ,EAAQ,QAGhB,OACE,mCACE,qBAAKF,QAAS,kBAAMO,EAAYH,EAAEC,IAAIT,UAAW,OAAQC,MAAO,CAACW,WAAYN,QCbpEO,MAlBjB,YAGI,IAH+C,IAAlCC,EAAiC,EAAjCA,MAAOJ,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,YAE3BI,EAAO,GACFC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CAEnC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIL,EAAME,GAAGC,OAAQE,IACjCD,EAAIE,KAAK,cAAC,EAAD,CAAwBb,MAAOO,EAAME,GAAGG,GAAIX,EAAGW,EAAGV,EAAGO,EAAGN,UAAWA,EAAWC,YAAaA,GAAhFK,EAAI,IAAMG,IAElCJ,EAAKK,KAAK,qBAAanB,MAAO,CAACoB,QAAS,OAAQC,cAAe,OAArD,SAA8DJ,GAApDF,IAGxB,OACE,mCACE,8BAAMD,OCGGQ,MAlBjB,YAAkD,IAA5BC,EAA2B,EAA3BA,wBAElB,OACI,sBAAKvB,MAAO,CAACE,UAAW,SAAUsB,MAAO,OAASvB,OAAQ,UAA1D,UACI,qGACA,6HACA,mDACkB,uBADlB,wBAEqB,uBAFrB,qBAGkB,uBAHlB,uBAIoB,uBAJpB,0BAOA,wBAAQE,QAASoB,EAAyBxB,UAAW,SAArD,2CCmYG0B,MA1Yf,WACE,IAAMC,EAAoBC,MAAMC,KAAKD,MAAM,KAAK,SAAAE,GAAC,OAAIF,MAAM,IAAIG,KAAK,QAC9DC,EAAwBJ,MAAMC,KAAKD,MAAM,KAAK,SAAAE,GAAC,OAAIF,MAAM,IAAIG,KAAK,QAClEE,EAA2B,CAC/B,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC9C,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC9C,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC9C,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC9C,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC9C,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC9C,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC9C,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC9C,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,IAC9C,CAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,KAIhD,EAAkCC,mBAASP,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAA0CF,mBAASF,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAgDJ,mBAASD,GAAzD,mBAAOM,EAAP,KAAyBC,EAAzB,KACA,EAAoDN,oBAAS,GAA7D,mBAAOO,EAAP,KAA2BC,EAA3B,KACA,EAAoCR,mBAAS,MAA7C,mBAAOpC,EAAP,KAAmB6C,EAAnB,KAaA,SAASC,EAAUC,EAAKC,GACtB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,GAOlD,SAASK,EAAWC,GAKlB,IAJA,IAAI3C,EAAGC,EAAG2C,IAIE,CAEV,IAAIC,EADJ7C,EAAIoC,EAAU,EAAE,IAGZU,EADJ7C,EAAImC,EAAU,EAAE,IAIhB,GAAkB,KAFlBQ,EAAYR,EAAU,EAAE,IAGtB,GAAInC,EAAI,EAAG,CAGT,IADA,IAAI8C,GAAe,EACVvC,EAAI,EAAGA,EAAImC,EAAO,EAAGnC,IAC5B,GAAsC,MAAlCqB,EAAcgB,GAAOC,KAAkB,CACzCC,GAAe,EACf,MAIJ,GAAIA,EAAc,CAChB,IAAK,IAAIvC,EAAI,EAAGA,EAAImC,EAAMnC,IAExBqB,EAAc7B,GAAGC,KAAO,IAE1B,WAGA,CAGF,IADA,IAAI8C,GAAe,EACVvC,EAAI,EAAGA,EAAImC,EAAO,EAAGnC,IAC5B,GAAsC,MAAlCqB,EAAcgB,GAAOC,KAAkB,CACzCC,GAAe,EACf,MAIJ,GAAIA,EAAc,CAChB,IAAK,IAAIvC,EAAI,EAAGA,EAAImC,EAAMnC,IAExBqB,EAAc7B,GAAGC,KAAO,IAE1B,YAID,GAAkB,IAAd2C,EACP,GAAI5C,EAAI,EAAG,CAGT,IADA,IAAI+C,GAAe,EACVvC,EAAI,EAAGA,EAAImC,EAAO,EAAGnC,IAC5B,GAAsC,MAAlCqB,EAAcgB,KAASC,GAAgB,CACzCC,GAAe,EACf,MAIJ,GAAIA,EAAc,CAChB,IAAK,IAAIvC,EAAI,EAAGA,EAAImC,EAAMnC,IAExBqB,EAAc7B,KAAKC,GAAK,IAE1B,WAGC,CAGH,IADA,IAAI8C,GAAe,EACVvC,EAAI,EAAGA,EAAImC,EAAO,EAAGnC,IAC5B,KAAIqC,EAAQ,IAE0B,MAAlChB,EAAcgB,KAASC,GAAgB,CACzCC,GAAe,EACf,MAIJ,GAAIA,EAAc,CAChB,IAAK,IAAIvC,EAAI,EAAGA,EAAImC,EAAMnC,IAExBqB,EAAc7B,KAAKC,GAAK,IAE1B,SAmKT,SAAS+C,EAAoC/C,EAAGD,EAAGiD,GAGhD,IAFA,IAAIC,EAAoBD,EAAQ,EAAI,GAE5BzC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACzB,IAAI2C,EAAoBF,EAAQ,EAAEC,EAAoB,EAAEA,EAGpDE,EAASnD,EAAEO,EAAGR,KAChB+B,EAAiB9B,EAAEO,GAAGR,IAAMmD,GAG1BC,EAASnD,EAAGD,EAAEQ,KAChBuB,EAAiB9B,GAAGD,EAAEQ,IAAM2C,GAG1BC,EAASnD,EAAEO,EAAGR,KAChB+B,EAAiB9B,EAAEO,GAAGR,IAAMmD,GAG1BC,EAASnD,EAAGD,EAAEQ,KAChBuB,EAAiB9B,GAAGD,EAAEQ,IAAM2C,GAG9BD,GAAqB,IAa3B,SAASE,EAASnD,EAAID,GAClB,GAFkB,GAEGA,GAAKA,EAHR,IACA,GAGKC,GAAKA,EAJV,GAKZ,OAAO,EAWjB,SAASoD,EAAiBC,GACxB,OAAQA,GAEN,IAAK,IACH,MAAO,IAET,IAAK,IACH,MAAO,IACT,QACE,OAAO,MASb,SAASC,EAAiBjD,GACxB,IAAI,IAAIL,EAAI,EAAGA,EAAIK,EAAMG,OAAQR,IAC/B,IAAK,IAAID,EAAI,EAAGA,EAAIM,EAAML,GAAGQ,OAAQT,IACnC,GAAoB,MAAhBM,EAAML,GAAGD,GACX,OAAO,EACb,OAAO,EAGT,OACE,qCACE,iCACE,iDAEa,MAAdV,GAAsB,cAAC,EAAD,CAASA,WAAYA,EAAYC,iBAzK5D,WACEqC,EAAaT,GACbW,EAAiBN,GACjBQ,EAAoBP,GACpBS,GAAsB,GACtBC,EAAc,SAqKZ,sBAAK3C,UAAW,OAAhB,UACE,gCACE,qCACA,cAAC,EAAD,CAAOc,MAAOqB,EAAWzB,WAAW,EAAOC,YAvNnD,SAAyBH,EAAGC,GAEtBgC,GACFL,GAAa,SAAA4B,GACX,IAAIC,EAAWD,EAAUE,KAAI,SAAAC,GAAK,OAAIA,EAAMC,WAG5C,OADAH,EAASxD,GAAGD,GAAyB,MAAnByD,EAASxD,GAAGD,GAAa,IAAM,IAC1CyD,WAkNNxB,EACC,cAAC,EAAD,CAAYjB,wBApWpB,WAqHE0B,EAAU,GAGVA,EAAU,GAGVA,EAAU,GAGVA,EAAU,GAGVA,EAAU,GA/HVR,GAAsB,kBAAM,QAoWtB,gCACE,oCACA,cAAC,EAAD,CAAO5B,MAAOuB,EAAe3B,WAAW,EAAMC,YA7MxD,SAA6BH,EAAGC,GAEZ,MAAdX,IAIuB,IAiC7B,SAAsBU,EAAGC,GACvB,IAAI4D,EAAYR,EAAiBxB,EAAc5B,GAAGD,IAClD,OAAiB,MAAb6D,IAGJhC,EAAc5B,GAAGD,GAAK6D,EACtB/B,GAAiB,SAAAxB,GAAK,mBAAQA,OACvB,GAxCHwD,CAAa9D,EAAGC,KAIhBsD,EAAiB1B,GACnBM,GAAc,KAyClB,WACE,MAYF,WAGI,IAFA,IAAI4B,EACAC,EAAiB,EACb/D,EAAI,EAAGA,EAAI8B,EAAiBtB,OAAQR,IAC1C,IAAK,IAAID,EAAI,EAAGA,EAAI+B,EAAiB9B,GAAGQ,OAAQT,IAC1C+B,EAAiB9B,GAAGD,GAAKgE,IAC3BA,EAAiBjC,EAAiB9B,GAAGD,GACrC+D,EAAW,CAAC/D,IAAGC,MAIrB,OAAO8D,EAvBIE,GAARjE,EAAL,EAAKA,EAAGC,EAAR,EAAQA,EACJ4D,EAAYR,EAAiB1B,EAAU1B,GAAGD,KA+BhD,SAA6BA,EAAGC,EAAGiE,GAKjC,OAFAnC,EAAiB9B,GAAGD,GAAK,EAEjBkE,GAEN,IAAK,IAEHlB,EAAoC/C,EAAGD,GAAG,GAC1C,MAGF,IAAK,IAEHgD,EAAoC/C,EAAGD,GAAG,KA7C9CmE,CAAoBnE,EAAGC,EAAG4D,GAE1BlC,EAAU1B,GAAGD,GAAK6D,EAClBjC,GAAa,SAAAtB,GAAK,mBAAQA,MA3C1B8D,GAGIb,EAAiB5B,IACnBQ,GAAc,cA8Ld,iCACE,mBAAGkC,KAAM,sDAAT,0CC9XOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.af413d66.chunk.js","sourcesContent":["function WinLose({ didUserWin, onPlayAgainClick }) {\n\n    return (\n        <div className={'grow'} style={{margin: 60, textAlign: 'center'}}>\n            <h2>{didUserWin ? 'You won!' : 'You lost!'}</h2>\n            <button onClick={onPlayAgainClick} className={'button'}>Play again</button>\n        </div>\n    );\n  }\n  \n  export default WinLose;","import './Cell.css'\n\nfunction Cell({ value, x, y, hideShips, onCellClick }) {\n\n    var color;\n\n    switch (value) {\n        //water\n        case 'W':\n            color = 'royalblue'\n            break;\n        //miss\n        case 'M':\n            color = 'lightgray'\n            break;\n        //destroyed\n        case 'D':\n            color = 'black'\n            break;\n        //hit\n        case 'H':\n            color = 'crimson'\n            break;\n        //ship\n        case 'S':\n            color = (hideShips ? 'royalblue' : 'green');\n            break;\n        default:\n            color = 'white'\n    }\n\n    return (\n      <>\n        <div onClick={() => onCellClick(x,y)} className={'cell'} style={{background: color}}></div>\n      </>\n    );\n  }\n  \n  export default Cell;","import Cell from \"./Cell\";\n\nfunction Board({ board, hideShips, onCellClick }) {\n\n    var rows = [];\n    for (var i = 0; i < board.length; i++) {\n        var row = [];\n        for (var j = 0; j < board[i].length; j++) {\n            row.push(<Cell key={i + ' ' + j} value={board[i][j]} x={j} y={i} hideShips={hideShips} onCellClick={onCellClick}/>)\n        }\n        rows.push(<div key={i} style={{display: 'flex', flexDirection: 'row'}}>{row}</div>);\n    }\n\n    return (\n      <>\n        <div>{rows}</div>\n      </>\n    );\n  }\n  \n  export default Board;","function Directions({ onDonePlacingShipsClick }) {\n    \n    return (\n        <div style={{textAlign: 'center', width: 30+'vw', margin: 'auto 0'}}>\n            <p>Your goal is to sink all of the AI's ships before it can sink yours.</p>\n            <p>To start, place the following ships horizontally or verically by clicking cells on the grid:</p>\n            <p>\n            Carrier (5 spaces)<br/>\n            Battleship (4 spaces)<br/>\n            Cruiser (3 spaces)<br/>\n            Submarine (3 spaces)<br/>\n            Destroyer (2 spaces)\n            </p>\n            <button onClick={onDonePlacingShipsClick} className={'button'}>I'm done placing my ships</button>\n        </div>\n    );\n  }\n  \n  export default Directions;\n\n\n\n\n","import './App.css';\nimport { useState } from 'react'\nimport WinLose from './WinLose';\nimport Board from './Board/Board';\nimport Directions from './Directions';\n\nfunction App() {\n  const startingUserBoard = Array.from(Array(10), _ => Array(10).fill('W'));\n  const startingComputerBoard = Array.from(Array(10), _ => Array(10).fill('W'));\n  const startingProbabilityBoard = [\n    [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.7, 0.7],\n    [0.7, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.7, 0.7],\n    [0.7, 0.7, 0.8, 0.8, 0.9, 0.9, 0.8, 0.8, 0.7, 0.7],\n    [0.7, 0.7, 0.8, 0.8, 0.9, 0.9, 0.8, 0.8, 0.7, 0.7],\n    [0.7, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.7, 0.7],\n    [0.7, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\n  ]\n\n  \n  const [userBoard, setUserBoard] = useState(startingUserBoard);\n  const [computerBoard, setComputerBoard] = useState(startingComputerBoard);\n  const [probabilityBoard, setProbabilityBoard] = useState(startingProbabilityBoard);\n  const [isUserPlacingShips, setIsUserPlacingShips] = useState(true);\n  const [didUserWin, setDidUserWin] = useState(null);\n\n  function onDonePlacingShipsClick() {\n    placeComputerShips();\n    setIsUserPlacingShips(() => false);\n  }\n\n  /**\n * \n * @param {int} min - the min value used \n * @param {int} max - the max value to be found -1\n * @returns {int} - value that randomly chosen between min and max -1\n */\n  function getRandom(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n  \n  /**\n   * Places ship in random location\n   * @param {int} ship - size of ship \n   */\n  function placeShip (ship) {\n    let x, y, direction\n\n    //checks to see if ship is already placed around random generated location dependent on ship size\n    //facing -> 0 (vertical) | 1 (horizontal)\n    while (true){\n      x = getRandom(0,10);\n      let tempX = x;\n      y = getRandom(0,10);\n      let tempY = y;\n      direction = getRandom(0,2);\n\n      if (direction === 0) {\n        if (y < 5) {\n          //check if we can place the ship\n          let canPlaceShip = true;\n          for (let i = 0; i < ship + 1; i++) {\n            if (computerBoard[tempX][tempY++] !== 'W') {\n              canPlaceShip = false;\n              break;\n            }\n          }\n          //place the ship\n          if (canPlaceShip) {\n            for (let i = 0; i < ship; i++) {\n              //change said location to a 'ship' block\n              computerBoard[x][y++] = 'S';\n            }\n            break;\n          }\n        }\n        else{\n          //check if we can place the ship\n          let canPlaceShip = true;\n          for (let i = 0; i < ship + 1; i++) {\n            if (computerBoard[tempX][tempY--] !== 'W') {\n              canPlaceShip = false;\n              break;\n            }\n          }\n          //place the ship\n          if (canPlaceShip) {\n            for (let i = 0; i < ship; i++) {\n              //change said location to a 'ship' block\n              computerBoard[x][y--] = 'S';\n            }\n            break;\n          }\n        }\n      }\n      else if (direction === 1){\n        if (x < 5) {\n          //check if we can place the ship\n          let canPlaceShip = true;\n          for (let i = 0; i < ship + 1; i++) {\n            if (computerBoard[tempX++][tempY] !== 'W') {\n              canPlaceShip = false;\n              break;\n            }\n          }\n          //place the ship\n          if (canPlaceShip) {\n            for (let i = 0; i < ship; i++) {\n              //change said location to a 'ship' block\n              computerBoard[x++][y] = 'S';\n            }\n            break;\n          }\n        } \n        else {\n          //check if we can place the ship\n          let canPlaceShip = true;          \n          for (let i = 0; i < ship + 1; i++) {\n            if (tempX < 0)\n              continue;\n            if (computerBoard[tempX--][tempY] !== 'W') {\n              canPlaceShip = false;\n              break;\n            }\n          }\n          //place the ship\n          if (canPlaceShip) {\n            for (let i = 0; i < ship; i++) {\n              //change said location to a 'ship' block\n              computerBoard[x--][y] = 'S';\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Randomly places the computer's ships on the computerBoard\n   */\n  function placeComputerShips() {\n    //carrier ship\n    placeShip(5);\n\n    //battleship\n    placeShip(4);\n\n    //cruiser\n    placeShip(3);\n\n    //submarine\n    placeShip(3);\n\n    //destroyer\n    placeShip(2);\n  }\n\n\n  /**\n   * Handles when a user clicks on their own cell\n   * @param {int} x - the x coordinate \n   * @param {int} y - the y coordinate\n   */\n  function onUserCellClick(x, y) {\n    //only react if the user is still placing their ships\n    if (isUserPlacingShips) {\n      setUserBoard(prevBoard => {\n        let newBoard = prevBoard.map(inner => inner.slice())\n        //clicking a cell switches it between water and a ship\n        newBoard[y][x] = (newBoard[y][x] === 'S' ? 'W' : 'S');\n        return newBoard;\n      })\n    }\n  }\n\n  /**\n   * Handles when a user clicks on a computer's cell\n   * @param {int} x - the x coordinate \n   * @param {int} y - the y coordinate\n   */\n  function onComputerCellClick(x, y) {\n    //make sure no one won yet\n    if (didUserWin != null)\n      return\n\n    //only continue if the user made a valid move\n    if (makeUserMove(x, y) === false)\n      return\n\n    //check if the user won\n    if (isAllShipsSunken(computerBoard)) {\n      setDidUserWin(true);\n      return;\n    }\n\n    makeComputerMove();\n\n    //check if the computer won\n    if (isAllShipsSunken(userBoard))\n      setDidUserWin(false);\n  }\n\n  /**\n   * Resets all the states to start a new game\n   */\n  function resetGame() {\n    setUserBoard(startingUserBoard);\n    setComputerBoard(startingComputerBoard);\n    setProbabilityBoard(startingProbabilityBoard);\n    setIsUserPlacingShips(true);\n    setDidUserWin(null);\n  }\n\n  /**\n   * Attempts to make a move for the user at computerBoard[y][x]\n   * @param {int} x - the x coordinate \n   * @param {int} y - the y coordinate\n   * @returns {boolean} if the user made a valid move\n   */\n  function makeUserMove(x, y) {\n    let nextState = getNextCellState(computerBoard[y][x]);\n    if (nextState == null)\n      return false;\n\n    computerBoard[y][x] = nextState;\n    setComputerBoard(board => [...board]);\n    return true;\n  }\n  \n  /**\n   * Makes the statistically best move for the computer\n   */\n  function makeComputerMove() {\n    let {x, y} = getBestMove();\n    let nextState = getNextCellState(userBoard[y][x]);\n    updateProbabilities(x, y, nextState);\n\n    userBoard[y][x] = nextState;\n    setUserBoard(board => [...board]);\n  }\n\n  /**\n   * Gets the move with the highest probability on the probabilityBoard\n   * @returns {x, y} the best move\n   */\n  function getBestMove() {\n      let bestMove;\n      let maxProbability = 0;\n      for(let y = 0; y < probabilityBoard.length; y++) {\n        for (let x = 0; x < probabilityBoard[y].length; x++) {\n          if (probabilityBoard[y][x] > maxProbability) {\n            maxProbability = probabilityBoard[y][x];\n            bestMove = {x, y};\n          }\n        }\n      }\n      return bestMove;\n  }\n\n  /**\n   * Updates the probability board given the result of the computer's move\n   * @param {int} x - the x coordinate of the computer's last move\n   * @param {int} y - the y coordinate of the computer's last move\n   * @param {string} resultingCellState The resulting state of the cell at userBoard[y][x]\n   */\n  function updateProbabilities(x, y, resultingCellState) {\n\n    //set the proability of the current move to 0 so we don't try it again\n    probabilityBoard[y][x] = 0.0;\n\n    switch (resultingCellState) {\n      //miss\n      case 'M':\n        //lesses the probabilties of the surrounding area\n        updateProbabilitiesAroundCoordinate(y, x, false)\n        break;\n\n      //hit\n      case 'H':\n        //increase the probabilties of the surrounding area\n        updateProbabilitiesAroundCoordinate(y, x, true)\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Updates the proababilties around the coordinates in a tapered cross\n   * @param {int} x - the x coordinate\n   * @param {int} y - the y coordinate\n   */\n   function updateProbabilitiesAroundCoordinate(y, x, isHit) {\n      let probabilityFactor = isHit ? 1 : 0.4\n      \n      for(let i = 0; i < 3; i++) {\n        let probabiltiyChange = isHit ? 1+probabilityFactor : 1-probabilityFactor;\n\n        //up\n        if (inBounds(y-i, x))\n          probabilityBoard[y-i][x] *= probabiltiyChange\n\n        //right\n        if (inBounds(y, x+i))\n          probabilityBoard[y][x+i] *= probabiltiyChange\n\n        //down\n        if (inBounds(y+i, x))\n          probabilityBoard[y+i][x] *= probabiltiyChange\n\n        //left\n        if (inBounds(y, x-i))\n          probabilityBoard[y][x-i] *= probabiltiyChange\n\n        //taper the probabilitiy as it gets farther from the coordinate\n        probabilityFactor -= 0.1\n      }\n  }\n  \n  \n  /**\n   * Checks if the coordinates are in the range of the board\n   * @param {int} x - the x coordinate\n   * @param {int} y - the y coordinate\n   * @returns A boolean representing if the coordinates are in range.\n   */\n  const maxArrayIndex = 10; \n  const minArrayIndex = 0; \n  function inBounds(y , x){\n      if( minArrayIndex <= x && x < maxArrayIndex){\n        if( minArrayIndex <= y && y < maxArrayIndex){\n            return true; \n        }\n      }\n  }\n\n\n  /**\n   * Determines the new state for a cell based on its existing state\n   * @param {string} prevState - the existing state of the cell\n   * @returns The next state, or null if no next state exists\n   */\n  function getNextCellState(prevState) {\n    switch (prevState) {\n      //water -> miss\n      case 'W':\n        return 'M'\n      //ship -> hit\n      case 'S':\n        return 'H';\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Checks to see if a board contains no ships\n   * @param {string[][]} board \n   * @returns {boolean} If the board contains no ships\n   */\n  function isAllShipsSunken(board) {\n    for(let y = 0; y < board.length; y++)\n      for (let x = 0; x < board[y].length; x++)\n        if (board[y][x] === 'S')\n          return false;\n    return true;\n  }\n\n  return (\n    <>\n      <header>\n        <h1>BATTLESHIP AI</h1>\n      </header>\n      {didUserWin != null && <WinLose didUserWin={didUserWin} onPlayAgainClick={resetGame}/>}\n      <div className={'game'}>\n        <div>\n          <h2>You</h2>\n          <Board board={userBoard} hideShips={false} onCellClick={onUserCellClick}/>\n        </div>\n        {isUserPlacingShips ? \n          <Directions onDonePlacingShipsClick={onDonePlacingShipsClick} />\n        :\n          <div>\n            <h2>AI</h2>\n            <Board board={computerBoard} hideShips={true} onCellClick={onComputerCellClick}/>\n          </div>\n        }\n      </div>\n      <footer>\n        <a href={'https://github.com/avdagama/battleship-ai-react-app'}>View project on GitHub</a>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}