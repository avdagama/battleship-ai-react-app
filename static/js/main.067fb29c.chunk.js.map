{"version":3,"sources":["Board/Cell.js","Board/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","color","value","x","y","hideShips","onCellClick","onClick","className","style","background","Board","board","rows","i","length","row","j","push","display","flexDirection","App","startingUserBoard","Array","from","_","fill","startingComputerBoard","startingProbabilityBoard","useState","userBoard","setUserBoard","computerBoard","setComputerBoard","probabilityBoard","setProbabilityBoard","isUserPlacingShips","setIsUserPlacingShips","didUserWin","setDidUserWin","getNextCellState","prevState","isAllShipsSunken","margin","textAlign","justifyContent","prevBoard","newBoard","map","inner","slice","width","nextState","makeUserMove","bestMove","maxProbability","getBestMove","resultingCellState","updateProbabilities","makeComputerMove","fontSize","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.067fb29c.chunk.js","sourcesContent":["import './Cell.css'\n\nfunction Cell({ value, x, y, hideShips, onCellClick }) {\n\n    var color;\n\n    switch (value) {\n        //water\n        case 'W':\n            color = 'royalblue'\n            break;\n        //miss\n        case 'M':\n            color = 'lightgray'\n            break;\n        //destroyed\n        case 'D':\n            color = 'black'\n            break;\n        //hit\n        case 'H':\n            color = 'crimson'\n            break;\n        //ship\n        case 'S':\n            color = (hideShips ? 'royalblue' : 'green');\n            break;\n        default:\n            color = 'white'\n    }\n\n    return (\n      <>\n        <div onClick={() => onCellClick(x,y)} className={'cell'} style={{background: color}}></div>\n      </>\n    );\n  }\n  \n  export default Cell;","import Cell from \"./Cell\";\n\nfunction Board({ board, hideShips, onCellClick }) {\n\n    var rows = [];\n    for (var i = 0; i < board.length; i++) {\n        var row = [];\n        for (var j = 0; j < board[i].length; j++) {\n            row.push(<Cell key={i + ' ' + j} value={board[i][j]} x={j} y={i} hideShips={hideShips} onCellClick={onCellClick}/>)\n        }\n        rows.push(<div key={i} style={{display: 'flex', flexDirection: 'row'}}>{row}</div>);\n    }\n\n    return (\n      <>\n        <div>{rows}</div>\n      </>\n    );\n  }\n  \n  export default Board;","import './App.css';\nimport { useState } from 'react'\nimport Board from './Board/Board';\n\nfunction App() {\n  const startingUserBoard = Array.from(Array(10), _ => Array(10).fill('W'));\n  const startingComputerBoard = Array.from(Array(10), _ => Array(10).fill('W'));\n  const startingProbabilityBoard = [\n    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n    [0.5, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.5],\n    [0.5, 0.6, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.6, 0.5],\n    [0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.7, 0.6, 0.5],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.7, 0.6, 0.5],\n    [0.5, 0.6, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.6, 0.5],\n    [0.5, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.5],\n    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n  ]\n  \n  const [userBoard, setUserBoard] = useState(startingUserBoard);\n  const [computerBoard, setComputerBoard] = useState(startingComputerBoard);\n  const [probabilityBoard, setProbabilityBoard] = useState(startingProbabilityBoard);\n  const [isUserPlacingShips, setIsUserPlacingShips] = useState(true);\n  const [didUserWin, setDidUserWin] = useState(null);\n\n  function onDonePlacingShipsClick() {\n    placeComputerShips();\n    setIsUserPlacingShips(() => false);\n  }\n\n  /**\n   * Randomly places the computer's ships on the computerBoard\n   */\n  function placeComputerShips() {\n    //TODO: currently we hardcode the ships, we should be randomly place them\n    computerBoard[8][1] = 'S';\n    computerBoard[8][2] = 'S';\n    computerBoard[8][3] = 'S';\n    computerBoard[8][4] = 'S';\n    computerBoard[8][5] = 'S';\n\n    computerBoard[0][1] = 'S';\n    computerBoard[1][1] = 'S';\n    computerBoard[2][1] = 'S';\n    computerBoard[3][1] = 'S';\n\n    computerBoard[4][4] = 'S';\n    computerBoard[4][5] = 'S';\n    computerBoard[4][6] = 'S';\n\n    computerBoard[7][9] = 'S';\n    computerBoard[8][9] = 'S';\n    computerBoard[9][9] = 'S';\n\n    computerBoard[2][7] = 'S';\n    computerBoard[1][7] = 'S';\n  }\n\n  /**\n   * Handles when a user clicks on their own cell\n   * @param {int} x - the x coordinate \n   * @param {int} y - the y coordinate\n   */\n  function onUserCellClick(x, y) {\n    //only react if the user is still placing their ships\n    if (isUserPlacingShips) {\n      setUserBoard(prevBoard => {\n        let newBoard = prevBoard.map(inner => inner.slice())\n        //clicking a cell switches it between water and a ship\n        newBoard[y][x] = (newBoard[y][x] === 'S' ? 'W' : 'S');\n        return newBoard;\n      })\n    }\n  }\n\n  /**\n   * Handles when a user clicks on a computer's cell\n   * @param {int} x - the x coordinate \n   * @param {int} y - the y coordinate\n   */\n  function onComputerCellClick(x, y) {\n    //make sure no one won yet\n    if (didUserWin != null)\n      return\n\n    //only continue if the user made a valid move\n    if (makeUserMove(x, y) == false)\n      return\n\n    //check if the user won\n    if (isAllShipsSunken(computerBoard)) {\n      setDidUserWin(true);\n      return;\n    }\n\n    makeComputerMove();\n\n    //check if the computer won\n    if (isAllShipsSunken(userBoard))\n      setDidUserWin(false);\n  }\n\n  function onPlayAgainClick() {\n    setUserBoard(startingUserBoard);\n    setComputerBoard(startingComputerBoard);\n    setProbabilityBoard(startingProbabilityBoard);\n    setIsUserPlacingShips(true);\n    setDidUserWin(null);\n  }\n\n  /**\n   * Attempts to make a move for the user at computerBoard[y][x]\n   * @param {int} x - the x coordinate \n   * @param {int} y - the y coordinate\n   * @returns {boolean} if the user made a valid move\n   */\n  function makeUserMove(x, y) {\n    let nextState = getNextCellState(computerBoard[y][x]);\n    if (nextState == null)\n      return false;\n\n    computerBoard[y][x] = nextState;\n    setComputerBoard(board => [...board]);\n    return true;\n  }\n  \n  /**\n   * Makes the statistically best move for the computer\n   */\n  function makeComputerMove() {\n    let {x, y} = getBestMove();\n    let nextState = getNextCellState(userBoard[y][x]);\n    updateProbabilities(x, y, nextState);\n\n    userBoard[y][x] = nextState;\n    setUserBoard(board => [...board]);\n  }\n\n  /**\n   * Gets the move with the highest probability on the probabilityBoard\n   * @returns {x, y} the best move\n   */\n  function getBestMove() {\n      let bestMove;\n      let maxProbability = 0;\n      for(let y = 0; y < probabilityBoard.length; y++) {\n        for (let x = 0; x < probabilityBoard[y].length; x++) {\n          if (probabilityBoard[y][x] > maxProbability) {\n            maxProbability = probabilityBoard[y][x];\n            bestMove = {x, y};\n          }\n        }\n      }\n      return bestMove;\n  }\n\n  /**\n   * Updates the probability board given the result of the computer's move\n   * @param {int} x - the x coordinate of the computer's last move\n   * @param {int} y - the y coordinate of the computer's last move\n   * @param {string} resultingCellState The resulting state of the cell at userBoard[y][x]\n   */\n  function updateProbabilities(x, y, resultingCellState) {\n    //since we don't want to make this move again, set the probability to 0\n    probabilityBoard[y][x] = 0.0;\n\n    switch (resultingCellState) {\n      //miss\n      case 'M':\n         // TODO: update the probability board after a miss\n        break;\n\n      //hit\n      case 'H':\n        // TODO: update the probability board after a hit\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Determines the new state for a cell based on its existing state\n   * @param {string} prevState - the existing state of the cell\n   * @returns The next state, or null if no next state exists\n   */\n  function getNextCellState(prevState) {\n    switch (prevState) {\n      //water -> miss\n      case 'W':\n        return 'M'\n      //ship -> hit\n      case 'S':\n        return 'H';\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Checks to see if a board contains no ships\n   * @param {string[][]} board \n   * @returns {boolean} If the board contains no ships\n   */\n  function isAllShipsSunken(board) {\n    for(let y = 0; y < board.length; y++)\n      for (let x = 0; x < board[y].length; x++)\n        if (board[y][x] === 'S')\n          return false;\n    return true;\n  }\n\n  return (\n    <>\n      <h1 style={{margin: 40}}>BATTLESHIP AI</h1>\n      {(didUserWin != null) && \n        <div className={'grow'} style={{margin: 60, textAlign: 'center'}}>\n          <h2>{didUserWin ? 'You won!' : 'You lost!'}</h2>\n          <button onClick={onPlayAgainClick} className={'button'}>Play again</button>\n        </div>\n      }\n      <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-evenly', margin: 40}}>\n        <div>\n          <h2>You</h2>\n          <Board board={userBoard} hideShips={false} onCellClick={onUserCellClick}/>\n        </div>\n        {isUserPlacingShips ? \n        <div style={{textAlign: 'center', width: 30+'vw', margin: 'auto 0'}}>\n          <p>Your goal is to sink all of the AI's ships before it can sink yours.</p>\n          <p>To start, place the following ships horizontally or verically by clicking cells on the grid:</p>\n          <p>\n            Carrier (5 spaces)<br/>\n            Battleship (4 spaces)<br/>\n            Cruiser (3 spaces)<br/>\n            Submarine (3 spaces)<br/>\n            Destroyer (2 spaces)\n          </p>\n          <button onClick={onDonePlacingShipsClick} className={'button'}>I'm done placing my ships</button>\n        </div>\n        :\n        <div>\n          <h2>AI</h2>\n          <Board board={computerBoard} hideShips={true} onCellClick={onComputerCellClick}/>\n        </div>\n        }\n      </div>\n      <div style={{margin: 80, textAlign: 'center'}}>\n        <a style={{fontSize: 14, color: 'dimgray'}} href={'https://github.com/avdagama/battleship-ai-react-app'}>View project on GitHub</a>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}